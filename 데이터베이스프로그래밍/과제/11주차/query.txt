CREATE OR REPLACE FUNCTION Date2EnrollYear(dDate IN DATE)
	RETURN NUMBER
IS
	nYear NUMBER;
	sMonth CHAR(2);
BEGIN
	SELECT TO_NUMBER(TO_CHAR(dDate, 'YYYY')),
	TO_CHAR(dDate, 'MM')
	INTO nYear, sMonth
	FROM DUAL;
	IF (sMonth ='11' OR sMonth='12') THEN
		nYear := nYear + 1;
	END IF;
RETURN nYear;
END;

CREATE OR REPLACE FUNCTION Date2EnrollSemester(dDate IN DATE)
	RETURN NUMBER
IS
	nSemester NUMBER;
	sMonth CHAR(2);
BEGIN
	SELECT TO_CHAR(dDate, 'MM')
	INTO sMonth
	FROM DUAL;
	IF (sMonth='11' OR sMonth='12' OR (sMonth >='01' AND sMonth<='04')) THEN
		nSemester := 1;
	ELSE
		nSemester := 2;
	END IF;
RETURN nSemester;
END;

CREATE OR REPLACE PROCEDURE InsertEnroll(sStudentId IN VARCHAR2,
	sCourseId IN VARCHAR2,
	nCourseIdNo IN NUMBER,
	result OUT VARCHAR2)
IS
	too_many_sumCourseUnit EXCEPTION;
	too_many_courses EXCEPTION;
	too_many_students EXCEPTION;
	duplicate_time EXCEPTION;
	nYear NUMBER;
	nSemester NUMBER;
	nSumCourseUnit NUMBER;
	nCourseUnit NUMBER;
	nCnt NUMBER;
	nTeachMax NUMBER;
BEGIN
	result := '';
	DBMS_OUTPUT.put_line('#');
	DBMS_OUTPUT.put_line(sStudentId || '님이 과목번호 ' || sCourseId || ', 분반 ' ||
	TO_CHAR(nCourseIdNo) || '의 수강 등록을 요청하였습니다.');
	nYear := Date2EnrollYear(SYSDATE);
	nSemester := Date2EnrollSemester(SYSDATE);
	
	SELECT SUM(c.c_unit)
	INTO nSumCourseUnit
	FROM course c, enroll e
	WHERE e.s_id = sStudentId AND e.e_year = nYear AND e.e_semester = nSemester
	AND e.c_id = c.c_id AND e.c_id_no = c.c_id_no;

	SELECT c_unit
	INTO nCourseUnit
	FROM course
	WHERE c_id = sCourseId and c_id_no = nCourseIdNo;
	IF (nSumCourseUnit + nCourseUnit > 18) THEN
		RAISE too_many_sumCourseUnit;
	END IF;

	SELECT COUNT(*)
	INTO nCnt
	FROM enroll
	WHERE s_id = sStudentId AND c_id = sCourseId;
	IF (nCnt > 0) THEN
		RAISE too_many_courses;
	END IF;

	SELECT t_max
	INTO nTeachMax
	FROM teach
	WHERE t_year= nYear AND t_semester = nSemester
	AND c_id = sCourseId AND c_id_no= nCourseIdNo;

	SELECT COUNT(*)
	INTO nCnt
	FROM enroll
	WHERE e_year = nYear AND e_semester = nSemester
	AND c_id = sCourseId AND c_id_no = nCourseIdNo;
	IF (nCnt >= nTeachMax) THEN
		RAISE too_many_students;
	END IF;

	SELECT COUNT(*)
	INTO nCnt
	FROM
	(SELECT t_time
	FROM teach
	WHERE t_year=nYear AND t_semester = nSemester
	AND c_id = sCourseId AND c_id_no = nCourseIdNo
	INTERSECT
	SELECT t.t_time
	FROM teach t, enroll e
	WHERE e.s_id=sStudentId AND e.e_year=nYear
	AND e.e_semester = nSemester AND t.t_year=nYear
	AND t.t_semester = nSemester AND e.c_id=t.c_id
	AND e.c_id_no=t.c_id_no);
	IF (nCnt > 0) THEN
		RAISE duplicate_time;
	END IF;

	INSERT INTO enroll(S_ID,C_ID,C_ID_NO,E_YEAR,E_SEMESTER)
	VALUES (sStudentId, sCourseId, nCourseIdNo, nYear, nSemester);
	COMMIT;
	result := '수강신청 등록이 완료되었습니다.';
EXCEPTION
WHEN too_many_sumCourseUnit THEN
result := '최대학점을 초과하였습니다';
WHEN too_many_courses THEN
result := '이미 등록된 과목을 신청하였습니다';
WHEN too_many_students THEN
result := '수강신청 인원이 초과되어 등록이 불가능합니다';
WHEN duplicate_time THEN
result := '이미 등록된 과목 중 중복되는 시간이 존재합니다';
WHEN OTHERS THEN
ROLLBACK;
result := SQLCODE;
END;

CREATE OR REPLACE PROCEDURE SelectTimeTable
	(sStudentId IN VARCHAR2,
	nYear IN NUMBER,
	nSemester IN NUMBER)
IS
	sId COURSE.C_ID%TYPE;
	sName COURSE.C_NAME%TYPE;
	nIdNo COURSE.C_ID_NO%TYPE;
	nUnit COURSE.C_UNIT%TYPE;
	nTime TEACH.T_TIME%TYPE;
	sWhere TEACH.T_WHERE%TYPE;
	nTotUnit NUMBER := 0;
CURSOR cur (sStudentId VARCHAR2, nYear NUMBER, nSemester NUMBER) IS
	SELECT e.c_id, c.c_name, e.c_id_no, c.c_unit, t.t_time, t.t_where
	FROM enroll e, course c, teach t
	WHERE e.s_id = sStudentId AND e.e_year = nYear
	AND e.e_semester=nSemester AND t.t_year = nYear
	AND t.t_semester = nSemester AND e.c_id = c.c_id
	AND e.c_id_no=c.c_id_no AND c.c_id=t.c_id AND c.c_id_no = t.c_id_no
	ORDER BY 5;
BEGIN
	OPEN cur(sStudentId, nYear, nSemester);
	DBMS_OUTPUT.put_line('#');
	DBMS_OUTPUT.put_line(TO_CHAR(nYear) || '년도 ' || TO_CHAR(nSemester) ||
	'학기의 ' || sStudentId || '님의 수강신청 시간표입니다.');
	LOOP
		FETCH cur INTO sId, sName, nIdNo, nUnit, nTime, sWhere;
			EXIT WHEN cur%NOTFOUND;
		DBMS_OUTPUT.put_line('교시:' || TO_CHAR(nTime) ||
		', 과목번호:' || sID || ', 과목명:'|| sName || ', 분반:' || TO_CHAR(nIdNo) ||
		', 학점:' || TO_CHAR(nUnit) || ', 장소:' || sWhere);
		nTotUnit := nTotUnit + nUnit;
	END LOOP;
	DBMS_OUTPUT.put_line('총 ' || TO_CHAR(cur%ROWCOUNT) || ' 과목과 총 ' ||
	TO_CHAR(nTotUnit) || '학점을 신청하였습니다.');
	CLOSE cur;
END;


CREATE OR REPLACE TRIGGER BeforeUpdateStudent BEFORE
	UPDATE ON student
FOR EACH ROW
DECLARE
	underflow_length EXCEPTION;
	invalid_value EXCEPTION;
	nLength NUMBER;
	nBlank NUMBER;
BEGIN
	SELECT length(:new.s_pwd), instr(:new.s_pwd,' ')
	INTO nLength, nBlank
	FROM DUAL;

	IF (nLength < 4) THEN
		RAISE underflow_length;
	ELSIF (nBlank > 0) THEN
		RAISE invalid_value;
	END IF;
EXCEPTION
WHEN underflow_length THEN
	RAISE_APPLICATION_ERROR(-20002, '암호는 4자리 이상이어야 합니다');
WHEN invalid_value THEN
	RAISE_APPLICATION_ERROR(-20003, '암호에 공란은 입력되지 않습니다.');
END;

DECLARE
result VARCHAR2(100) := '';
BEGIN
DBMS_OUTPUT.ENABLE;
DBMS_OUTPUT.PUT_LINE('**************** Insert 및 에러 처리 테스트 ********************');
InsertEnroll('20011234', 'C400', 3, result);
DBMS_OUTPUT.PUT_LINE('결과 : ' || result);
InsertEnroll('20011234', 'C900', 3, result);
DBMS_OUTPUT.PUT_LINE('결과 : ' || result);
InsertEnroll('20011234', 'M100', 3, result);
DBMS_OUTPUT.PUT_LINE('결과 : ' || result);
InsertEnroll('20011234', 'C800', 3, result);
DBMS_OUTPUT.PUT_LINE('결과 : ' || result);
InsertEnroll('20011234', 'M700', 3, result);
DBMS_OUTPUT.PUT_LINE('결과 : ' || result);
DBMS_OUTPUT.PUT_LINE('***************** CURSOR를 이용한 SELECT 테스트 ****************');
SelectTimeTable('20011234', 2023, 1);
DELETE FROM enroll
WHERE s_id='20011234' AND c_id='C800' AND c_id_no=3;
END;

