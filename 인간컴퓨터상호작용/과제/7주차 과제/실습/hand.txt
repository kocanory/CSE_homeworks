#include <opencv2/opencv.hpp>
#include "Pixel.h"
#include "Morph.h"
#include "ImageAnalysis.h"
using namespace cv;

#define CAM_WIDTH 800
#define CAM_HEIGHT 480

int main()
{
	VideoCapture cam(0);
	cam.set(CV_CAP_PROP_FRAME_WIDTH, CAM_WIDTH);
	cam.set(CV_CAP_PROP_FRAME_HEIGHT, CAM_HEIGHT);
	Mat Origin_frame;
	cam.read(Origin_frame);
	Mat HAND_MASK = imread("1.png", 1);
	if (!cam.isOpened())
	{
		printf("--(!)Error opening videio cam\n");
		return -1;
	}
	while (cam.read(Origin_frame))
	{
		if (Origin_frame.empty())
		{
			printf("--(!) No cam frame -- Break!");
			break;
		}
		imshow("original_img", Origin_frame);
		resize(HAND_MASK, HAND_MASK, Size(Origin_frame.cols, Origin_frame.rows), 0, 0, CV_INTER_LINEAR);
		imshow("HAND_MASK", HAND_MASK);

		Mat Mask = Origin_frame + HAND_MASK;
		imshow("mask", Mask);

		Mat YCrCb;
		cvtColor(Mask, YCrCb, CV_BGR2YCrCb);
		imshow("YCrCb", YCrCb);

		Mat Skin_Area;
		inRange(YCrCb, Scalar(0, 130, 90), Scalar(255, 168, 130), Skin_Area);
		imshow("range", Skin_Area);
		
		Mat Mask_gray;
		cvtColor(Mask, Mask_gray, CV_BGR2GRAY);
		imshow("Origin_gray", Mask_gray);
		Mat Skin_gray = Mask_gray + (~Skin_Area);
		imshow("Skin_gray", Skin_gray);
		
		Mat thresh_skin_gray;
		threshold(Skin_gray, thresh_skin_gray, 200, 255, THRESH_BINARY);
		imshow("thresh_skin_gray", thresh_skin_gray);
		Mat tild_thresh_skin_gray = ~thresh_skin_gray;
		erode(tild_thresh_skin_gray, tild_thresh_skin_gray, Mat(3, 3, CV_8U, Scalar(1)), Point(-1, -1), 2);
		imshow("erosion", thresh_skin_gray);

		Mat dist;
		distanceTransform(tild_thresh_skin_gray, dist, CV_DIST_L2, 5);
		normalize(dist, dist, 255, 0, NORM_MINMAX, CV_8UC1);
		imshow("dist", dist);

		int maxldx[2];
		int minldx[2];
		double radius(0);
		minMaxIdx(dist, NULL, NULL, minldx, maxldx, dist);
		Point center(maxldx[1], maxldx[0]);
		if (center.x < 0) center.x = 0;
		if (center.y < 0) center.y = 0;
		if (radius < 0) radius = 0;

		radius = (maxldx[0] - minldx[0]) / 2;
		circle(Origin_frame, center, (int)(radius + 0.5), Scalar(125, 255, 0), -1);
		imshow("palm_area", Origin_frame);

		Mat Skin_gray_clone = Skin_gray.clone();
		circle(Skin_gray_clone, center, (int)(radius + 0.5), Scalar(0, 0, 0), -1);
		imshow("Skin_gray_clone", Skin_gray_clone);
		Mat Sub = Skin_gray - Skin_gray_clone;
		imshow("Sub", Sub);

		Mat CannyEdge;
		Canny(Sub, CannyEdge, 40, 110);
		imshow("CannyEdge", CannyEdge);
		circle(CannyEdge, center, (int)(radius + 0.5), Scalar(0, 0, 0), 4);
		imshow("Result", CannyEdge);
		waitKey();
	}
}